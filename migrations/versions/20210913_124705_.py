"""empty message

Revision ID: cd4319cb80a2
Revises: dd0693abfda9
Create Date: 2021-09-13 12:47:05.990527

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd4319cb80a2'
down_revision = 'dd0693abfda9'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('activities', sa.Column('type_id', sa.Integer(), nullable=True))
    op.add_column('activities', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('activities', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint('activities_typeId_fkey', 'activities', type_='foreignkey')
    op.create_foreign_key(None, 'activities', 'activity_types', ['type_id'], ['id'])
    op.drop_column('activities', 'updatedAt')
    op.drop_column('activities', 'createdAt')
    op.drop_column('activities', 'typeId')
    op.add_column('activity_types', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('activity_types', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_column('activity_types', 'createdAt')
    op.drop_column('activity_types', 'updatedAt')
    op.add_column('comments', sa.Column('post_id', sa.Integer(), nullable=True))
    op.add_column('comments', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('comments', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('comments', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint('comments_postId_fkey', 'comments', type_='foreignkey')
    op.drop_constraint('comments_userId_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'comments', 'users', ['user_id'], ['id'])
    op.drop_column('comments', 'userId')
    op.drop_column('comments', 'createdAt')
    op.drop_column('comments', 'postId')
    op.drop_column('comments', 'updatedAt')
    op.add_column('jobs', sa.Column('role_id', sa.Integer(), nullable=True))
    op.add_column('jobs', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('jobs', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint('jobs_roleId_fkey', 'jobs', type_='foreignkey')
    op.create_foreign_key(None, 'jobs', 'roles', ['role_id'], ['id'])
    op.drop_column('jobs', 'updatedAt')
    op.drop_column('jobs', 'createdAt')
    op.drop_column('jobs', 'roleId')
    op.add_column('parties', sa.Column('post_id', sa.Integer(), nullable=True))
    op.add_column('parties', sa.Column('owner_id', sa.Integer(), nullable=True))
    op.add_column('parties', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('parties', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint('parties_ownerId_fkey', 'parties', type_='foreignkey')
    op.drop_constraint('parties_postId_fkey', 'parties', type_='foreignkey')
    op.create_foreign_key(None, 'parties', 'posts', ['post_id'], ['id'])
    op.create_foreign_key(None, 'parties', 'users', ['owner_id'], ['id'])
    op.drop_column('parties', 'updatedAt')
    op.drop_column('parties', 'ownerId')
    op.drop_column('parties', 'createdAt')
    op.drop_column('parties', 'postId')
    op.add_column('parties_requests', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('parties_requests', sa.Column('party_id', sa.Integer(), nullable=True))
    op.drop_constraint('parties_requests_userId_fkey', 'parties_requests', type_='foreignkey')
    op.drop_constraint('parties_requests_partyId_fkey', 'parties_requests', type_='foreignkey')
    op.create_foreign_key(None, 'parties_requests', 'parties', ['party_id'], ['id'])
    op.create_foreign_key(None, 'parties_requests', 'users', ['user_id'], ['id'])
    op.drop_column('parties_requests', 'userId')
    op.drop_column('parties_requests', 'partyId')
    op.add_column('roles', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('roles', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_column('roles', 'createdAt')
    op.drop_column('roles', 'updatedAt')
    op.add_column('users', sa.Column('profile_url', sa.String(), nullable=False))
    op.add_column('users', sa.Column('job_id', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=False))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=False))
    op.drop_constraint('users_jobId_fkey', 'users', type_='foreignkey')
    op.create_foreign_key(None, 'users', 'jobs', ['job_id'], ['id'])
    op.drop_column('users', 'jobId')
    op.drop_column('users', 'updatedAt')
    op.drop_column('users', 'createdAt')
    op.drop_column('users', 'profileUrl')
    op.add_column('users_parties', sa.Column('user_id', sa.Integer(), nullable=True))
    op.add_column('users_parties', sa.Column('party_id', sa.Integer(), nullable=True))
    op.drop_constraint('users_parties_partyId_fkey', 'users_parties', type_='foreignkey')
    op.drop_constraint('users_parties_userId_fkey', 'users_parties', type_='foreignkey')
    op.create_foreign_key(None, 'users_parties', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'users_parties', 'parties', ['party_id'], ['id'])
    op.drop_column('users_parties', 'userId')
    op.drop_column('users_parties', 'partyId')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users_parties', sa.Column('partyId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('users_parties', sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users_parties', type_='foreignkey')
    op.drop_constraint(None, 'users_parties', type_='foreignkey')
    op.create_foreign_key('users_parties_userId_fkey', 'users_parties', 'users', ['userId'], ['id'])
    op.create_foreign_key('users_parties_partyId_fkey', 'users_parties', 'parties', ['partyId'], ['id'])
    op.drop_column('users_parties', 'party_id')
    op.drop_column('users_parties', 'user_id')
    op.add_column('users', sa.Column('profileUrl', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('users', sa.Column('jobId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.create_foreign_key('users_jobId_fkey', 'users', 'jobs', ['jobId'], ['id'])
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'job_id')
    op.drop_column('users', 'profile_url')
    op.add_column('roles', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('roles', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'created_at')
    op.add_column('parties_requests', sa.Column('partyId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('parties_requests', sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'parties_requests', type_='foreignkey')
    op.drop_constraint(None, 'parties_requests', type_='foreignkey')
    op.create_foreign_key('parties_requests_partyId_fkey', 'parties_requests', 'parties', ['partyId'], ['id'])
    op.create_foreign_key('parties_requests_userId_fkey', 'parties_requests', 'users', ['userId'], ['id'])
    op.drop_column('parties_requests', 'party_id')
    op.drop_column('parties_requests', 'user_id')
    op.add_column('parties', sa.Column('postId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('parties', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('parties', sa.Column('ownerId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('parties', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'parties', type_='foreignkey')
    op.drop_constraint(None, 'parties', type_='foreignkey')
    op.create_foreign_key('parties_postId_fkey', 'parties', 'posts', ['postId'], ['id'])
    op.create_foreign_key('parties_ownerId_fkey', 'parties', 'users', ['ownerId'], ['id'])
    op.drop_column('parties', 'updated_at')
    op.drop_column('parties', 'created_at')
    op.drop_column('parties', 'owner_id')
    op.drop_column('parties', 'post_id')
    op.add_column('jobs', sa.Column('roleId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('jobs', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('jobs', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'jobs', type_='foreignkey')
    op.create_foreign_key('jobs_roleId_fkey', 'jobs', 'roles', ['roleId'], ['id'])
    op.drop_column('jobs', 'updated_at')
    op.drop_column('jobs', 'created_at')
    op.drop_column('jobs', 'role_id')
    op.add_column('comments', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('comments', sa.Column('postId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('comments', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('comments', sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key('comments_userId_fkey', 'comments', 'users', ['userId'], ['id'])
    op.create_foreign_key('comments_postId_fkey', 'comments', 'posts', ['postId'], ['id'])
    op.drop_column('comments', 'updated_at')
    op.drop_column('comments', 'created_at')
    op.drop_column('comments', 'user_id')
    op.drop_column('comments', 'post_id')
    op.add_column('activity_types', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('activity_types', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_column('activity_types', 'updated_at')
    op.drop_column('activity_types', 'created_at')
    op.add_column('activities', sa.Column('typeId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('activities', sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('activities', sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'activities', type_='foreignkey')
    op.create_foreign_key('activities_typeId_fkey', 'activities', 'activity_types', ['typeId'], ['id'])
    op.drop_column('activities', 'updated_at')
    op.drop_column('activities', 'created_at')
    op.drop_column('activities', 'type_id')
    # ### end Alembic commands ###
